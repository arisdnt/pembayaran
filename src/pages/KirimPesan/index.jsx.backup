import { useEffect, useMemo, useState } from 'react'
import { db } from '../../offline/db'
import { bulkInsertKirimPesan, deleteKirimPesanByContent } from '../../offline/actions/kirimPesan'
import { Card, Text } from '@radix-ui/themes'
import Notification from './components/Notification'
import DeleteDialog from './components/DeleteDialog'
import LogViewer from './components/LogViewer'
import FilterControls from './components/FilterControls'
import MessageTable from './components/MessageTable'
import { useMessageData } from './hooks/useMessageData'
import { useMessageGenerator } from './hooks/useMessageGenerator'
import { useMessageSender } from './hooks/useMessageSender'

export default function KirimPesan() {
  const [tahunAjaranList, setTahunAjaranList] = useState([])
  const [kelasList, setKelasList] = useState([])
  const [tingkatList, setTingkatList] = useState([])
  const [selectedTA, setSelectedTA] = useState('')
  const [selectedTingkat, setSelectedTingkat] = useState('_all')
  const [selectedKelas, setSelectedKelas] = useState('_all')
  const [rateMs, setRateMs] = useState(10000)
  const [notification, setNotification] = useState(null)
  const [deleteDialog, setDeleteDialog] = useState({ open: false, index: null })

  const { kirimPesanData, kirimPesanLoading, forceRefresh } = useMessageData()
  
  const filteredKelas = useMemo(() => {
    if (!selectedTingkat || selectedTingkat === '_all') return kelasList
    return kelasList.filter(k => String(k.tingkat) === String(selectedTingkat))
  }, [kelasList, selectedTingkat])

  const { loading, generatePreview } = useMessageGenerator(
    selectedTA,
    selectedTingkat,
    selectedKelas,
    tahunAjaranList,
    kelasList,
    filteredKelas
  )
  
  const { sending, logLines, handleKirim } = useMessageSender(rateMs, forceRefresh)

  useEffect(() => {
    ;(async () => {
      const [ta, kk] = await Promise.all([
        db.tahun_ajaran.orderBy('tanggal_mulai').reverse().toArray(),
        db.kelas.orderBy('tingkat').toArray(),
      ])
      setTahunAjaranList(ta)
      setKelasList(kk)
      const uniqueTingkat = Array.from(new Set((kk || []).map(k => String(k.tingkat)))).sort((a,b) => (a.localeCompare(b, 'id', { numeric: true })))
      setTingkatList(uniqueTingkat)
      const aktif = ta.find(x => x.status_aktif)
      if (aktif) setSelectedTA(aktif.id)
    })()
  }, [])

  const showNotification = (type, message) => {
    setNotification({ type, message })
    setTimeout(() => setNotification(null), 5000)
  }

  const handleGenerate = async () => {
    const rows = await generatePreview()
    if (!rows || rows.length === 0) {
      showNotification('error', 'Tidak ada data pesan untuk digenerate. Periksa filter atau pastikan siswa memiliki nomor WhatsApp wali.')
      return
    }
    try {
      await bulkInsertKirimPesan(rows)
      showNotification('success', `Berhasil generate ${rows.length} pesan ke database.`)
    } catch (e) {
      console.error(e)
      showNotification('error', 'Gagal generate data kirim pesan: ' + e.message)
    }
  }

  const handleDeleteRow = (index) => {
    setDeleteDialog({ open: true, index })
  }

  const confirmDelete = async () => {
    if (deleteDialog.index !== null) {
      const rowToDelete = kirimPesanData[deleteDialog.index]
      try {
        await deleteKirimPesanByContent(rowToDelete.nomor_whatsapp, rowToDelete.isi_pesan)
        setDeleteDialog({ open: false, index: null })
        showNotification('success', 'Data berhasil dihapus dari database.')
      } catch (e) {
        console.error('Error deleting from database:', e)
        showNotification('error', 'Gagal menghapus data dari database: ' + e.message)
        setDeleteDialog({ open: false, index: null })
      }
    }
  }

  const handleSendMessages = async () => {
    try {
      const results = await handleKirim()
      if (results) {
        showNotification('success', `Berhasil: ${results.success}, Gagal: ${results.failed} dari ${results.total} pesan`)
      }
    } catch (e) {
      const errorMsg = e?.message || String(e) || 'Unknown error'
      showNotification('error', 'Gagal mengirim pesan: ' + errorMsg)
    }
  }

  return (
    <div className="h-screen flex flex-col p-6">
      <Notification 
        notification={notification} 
        onClose={() => setNotification(null)} 
      />

      <div className="grid grid-cols-12 gap-4 flex-1 overflow-hidden">
        <div className="col-span-9 flex flex-col overflow-hidden">
          <Card className="p-4 flex flex-col h-full overflow-hidden">
            <FilterControls
              tahunAjaranList={tahunAjaranList}
              tingkatList={tingkatList}
              filteredKelas={filteredKelas}
              selectedTA={selectedTA}
              selectedTingkat={selectedTingkat}
              selectedKelas={selectedKelas}
              rateMs={rateMs}
              loading={loading}
              sending={sending}
              onTAChange={setSelectedTA}
              onTingkatChange={setSelectedTingkat}
              onKelasChange={setSelectedKelas}
              onRateMsChange={setRateMs}
              onGenerate={handleGenerate}
              onKirim={handleSendMessages}
              messageCount={kirimPesanData.length}
            />
            <div className="mb-4 pb-4 border-b flex-shrink-0">
              <div className="flex items-center gap-3 flex-wrap">
                <div className="flex items-center gap-2">
                  <Filter className="h-4 w-4 text-slate-600" />
                  <Text size="2" weight="medium" className="text-slate-700">Filter:</Text>
                </div>

                {/* Tahun Ajaran */}
                <div className="flex items-center gap-2">
                  <BookOpen className="h-3.5 w-3.5 text-blue-500" />
                  <Select.Root value={selectedTA} onValueChange={setSelectedTA}>
                    <Select.Trigger style={{ borderRadius: 0, width: '200px' }} placeholder="Tahun Ajaran" />
                    <Select.Content style={{ borderRadius: 0 }}>
                      {tahunAjaranList.map(ta => (
                        <Select.Item key={ta.id} value={ta.id}>
                          {ta.nama} {ta.status_aktif && '(Aktif)'}
                        </Select.Item>
                      ))}
                    </Select.Content>
                  </Select.Root>
                </div>

                {/* Tingkat */}
                <div className="flex items-center gap-2">
                  <GraduationCap className="h-3.5 w-3.5 text-indigo-500" />
                  <Select.Root value={selectedTingkat} onValueChange={setSelectedTingkat}>
                    <Select.Trigger style={{ borderRadius: 0, width: '140px' }} placeholder="Tingkat" />
                    <Select.Content style={{ borderRadius: 0 }}>
                      <Select.Item value="_all">Semua Tingkat</Select.Item>
                      {tingkatList.map(t => (
                        <Select.Item key={t} value={t}>Tingkat {t}</Select.Item>
                      ))}
                    </Select.Content>
                  </Select.Root>
                </div>

                {/* Kelas */}
                <div className="flex items-center gap-2">
                  <School className="h-3.5 w-3.5 text-green-500" />
                  <Select.Root value={selectedKelas} onValueChange={setSelectedKelas}>
                    <Select.Trigger style={{ borderRadius: 0, width: '160px' }} placeholder="Kelas" />
                    <Select.Content style={{ borderRadius: 0 }}>
                      <Select.Item value="_all">Semua Kelas</Select.Item>
                      {filteredKelas.map(k => (
                        <Select.Item key={k.id} value={k.id}>{k.tingkat} - {k.nama_sub_kelas}</Select.Item>
                      ))}
                    </Select.Content>
                  </Select.Root>
                </div>

                {/* Rate Limit */}
                <div className="flex items-center gap-2">
                  <Clock className="h-3.5 w-3.5 text-amber-500" />
                  <input
                    type="number"
                    min={5}
                    max={60}
                    step={1}
                    className="border border-slate-300 px-2 py-1 w-20 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    style={{ borderRadius: 0, height: '28px' }}
                    value={rateMs / 1000}
                    onChange={e => setRateMs(Number(e.target.value || 10) * 1000)}
                    placeholder="detik"
                  />
                  <Text size="1" className="text-slate-600">detik/pesan</Text>
                </div>

                <div className="flex items-center gap-2 ml-auto">
                  <Button
                    disabled={loading}
                    onClick={handleGenerate}
                    className="cursor-pointer"
                    style={{ borderRadius: 0 }}
                    size="2"
                  >
                    {loading ? 'Memproses...' : 'Generate'}
                  </Button>
                  <Button
                    disabled={sending || kirimPesanData.length === 0}
                    onClick={handleKirim}
                    color="green"
                    className="cursor-pointer"
                    style={{ borderRadius: 0 }}
                    size="2"
                  >
                    {sending ? 'Mengirim...' : 'Kirim Pesan'}
                  </Button>
                </div>
              </div>
            </div>

            {/* Tabel Preview */}
            <Text weight="bold" className="mb-2 block flex-shrink-0">Preview ({kirimPesanData.length})</Text>
            <div className="overflow-auto flex-1 border">
              <table className="w-full text-sm" style={{ tableLayout: 'fixed' }}>
                <thead className="bg-slate-100 sticky top-0">
                  <tr>
                    <th className="px-2 py-2 text-left font-semibold border-b" style={{ width: '9%' }}>Nomor</th>
                    <th className="px-2 py-2 text-left font-semibold border-b" style={{ width: '11%' }}>Tahun Ajaran</th>
                    <th className="px-2 py-2 text-left font-semibold border-b" style={{ width: '5%' }}>Tingkat</th>
                    <th className="px-2 py-2 text-left font-semibold border-b" style={{ width: '8%' }}>Kelas</th>
                    <th className="px-2 py-2 text-left font-semibold border-b" style={{ width: '50%' }}>Isi Pesan</th>
                    <th className="px-2 py-2 text-center font-semibold border-b" style={{ width: '8%' }}>Status</th>
                    <th className="px-2 py-2 text-center font-semibold border-b" style={{ width: '9%' }}>Aksi</th>
                  </tr>
                </thead>
                <tbody>
                  {kirimPesanData.map((r, idx) => (
                    <tr key={idx} className="border-b hover:bg-slate-50">
                      <td className="px-2 py-2 break-words">{r.nomor_whatsapp}</td>
                      <td className="px-2 py-2 break-words">{r.tahun_ajaran}</td>
                      <td className="px-2 py-2 break-words">{r.tingkat_kelas}</td>
                      <td className="px-2 py-2 break-words">{r.kelas_spesifik}</td>
                      <td className="px-2 py-2 text-xs break-words">
                        {r.isi_pesan.split('\n').map((line, lineIdx) => {
                          // Highlight "Nama: ..." dengan warna merah bold
                          if (line.startsWith('Nama: ')) {
                            const nama = line.substring(6)
                            return (
                              <span key={lineIdx}>
                                Nama: <span className="text-red-600 font-bold">{nama}</span>
                                {lineIdx < r.isi_pesan.split('\n').length - 1 && ' '}
                              </span>
                            )
                          }
                          // Highlight "Kelas: ..." dengan warna merah bold
                          if (line.startsWith('Kelas: ')) {
                            const kelas = line.substring(7)
                            return (
                              <span key={lineIdx}>
                                Kelas: <span className="text-red-600 font-bold">{kelas}</span>
                                {lineIdx < r.isi_pesan.split('\n').length - 1 && ' '}
                              </span>
                            )
                          }
                          return <span key={lineIdx}>{line}{lineIdx < r.isi_pesan.split('\n').length - 1 && ' '}</span>
                        })}
                      </td>
                      <td className="px-2 py-2 text-center">
                        {r.status === 'sent' ? (
                          <span className="inline-flex items-center gap-1 px-2 py-1 text-xs font-semibold bg-green-100 text-green-700 border border-green-300">
                            <CheckCircle2 className="w-3 h-3" />
                            Terkirim
                          </span>
                        ) : r.status === 'failed' ? (
                          <span className="inline-flex items-center gap-1 px-2 py-1 text-xs font-semibold bg-red-100 text-red-700 border border-red-300">
                            <XCircle className="w-3 h-3" />
                            Gagal
                          </span>
                        ) : (
                          <span className="inline-flex items-center gap-1 px-2 py-1 text-xs font-semibold bg-amber-100 text-amber-700 border border-amber-300">
                            <Clock className="w-3 h-3" />
                            Pending
                          </span>
                        )}
                      </td>
                      <td className="px-2 py-2 text-center">
                        <button
                          onClick={() => handleDeleteRow(idx)}
                          className="text-red-600 hover:text-red-800 p-1 transition-colors"
                          title="Hapus"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </td>
                    </tr>
                  ))}
                  {kirimPesanData.length === 0 && (
                    <tr>
                      <td colSpan={7} className="px-2 py-8 text-center text-slate-600">
                        {kirimPesanLoading ? 'Memuat data...' : 'Belum ada data. Pilih filter lalu klik Generate.'}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </Card>
        </div>

        {/* Kolom Kanan - Log (25%) */}
        <div className="col-span-3 flex flex-col overflow-hidden">
          <Card className="p-4 flex flex-col h-full overflow-hidden">
            <Flex justify="between" align="center" className="mb-2 flex-shrink-0">
              <Text weight="bold">Log</Text>
              <Button
                size="1"
                variant="soft"
                disabled={logLines.length === 0}
                onClick={handleCopyLog}
                className="cursor-pointer"
              >
                {copied ? (
                  <>
                    <Check className="w-3 h-3 mr-1" />
                    Tersalin
                  </>
                ) : (
                  <>
                    <Copy className="w-3 h-3 mr-1" />
                    Copy
                  </>
                )}
              </Button>
            </Flex>
            <div ref={logRef} className="border p-2 overflow-auto bg-black text-green-300 text-xs font-mono flex-1">
              {logLines.map((l, i) => <div key={i}>{l}</div>)}
            </div>
            <Text size="1" className="text-slate-600 mt-2 block flex-shrink-0">Pengiriman menggunakan Fonnte API. Pastikan device WhatsApp terhubung di dashboard Fonnte.</Text>
          </Card>
        </div>
      </div>

      {/* Delete Confirmation Dialog */}
      <Dialog.Root open={deleteDialog.open} onOpenChange={(open) => setDeleteDialog({ open, index: null })}>
        <Dialog.Content
          style={{
            maxWidth: '500px',
            width: '95vw',
            padding: 0,
            borderRadius: 0,
            overflow: 'hidden'
          }}
          className="border-2 border-slate-300 shadow-2xl"
        >
          {/* Header */}
          <div className="flex items-center justify-between border-b-2 border-slate-300 bg-gradient-to-b from-red-50 to-red-100 px-5 py-4">
            <div className="flex items-center gap-2.5">
              <div className="flex h-10 w-10 items-center justify-center border border-red-700 bg-red-600 shadow-sm">
                <AlertTriangle className="h-5 w-5 text-white" />
              </div>
              <div>
                <Text size="3" weight="bold" className="text-slate-800 uppercase tracking-wider">
                  Hapus Data
                </Text>
                <Text size="1" className="text-slate-500 block mt-0.5">
                  Konfirmasi penghapusan data
                </Text>
              </div>
            </div>
            <button
              onClick={() => setDeleteDialog({ open: false, index: null })}
              className="flex h-8 w-8 items-center justify-center hover:bg-red-100 hover:border-red-400 transition-all border border-slate-300 group"
              aria-label="Close"
              type="button"
            >
              <X className="h-4 w-4 text-slate-600 group-hover:text-red-600 transition-colors" />
            </button>
          </div>

          {/* Content */}
          <div className="bg-white p-6">
            <div className="flex items-start gap-3 p-4 bg-red-50 border-2 border-red-200 mb-4">
              <AlertTriangle className="h-5 w-5 text-red-600 mt-0.5 shrink-0" />
              <div>
                <Text size="2" weight="medium" className="text-red-900 mb-1 block">
                  Peringatan
                </Text>
                <Text size="2" className="text-red-700">
                  Data yang dihapus dari preview akan hilang dan tidak akan dikirim.
                </Text>
              </div>
            </div>

            <Text size="2" className="text-slate-700 leading-relaxed">
              Apakah Anda yakin ingin menghapus baris ini dari preview?
            </Text>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-end gap-3 border-t-2 border-slate-300 bg-gradient-to-b from-slate-50 to-slate-100 px-5 py-3">
            <Button
              type="button"
              variant="soft"
              color="gray"
              onClick={() => setDeleteDialog({ open: false, index: null })}
              style={{ borderRadius: 0 }}
              className="cursor-pointer border border-slate-300 shadow-sm hover:shadow"
            >
              Batal
            </Button>
            <Button
              onClick={confirmDelete}
              style={{
                borderRadius: 0,
                backgroundColor: '#dc2626',
                border: '1px solid #b91c1c'
              }}
              className="cursor-pointer text-white shadow-sm hover:shadow"
            >
              Hapus
            </Button>
          </div>
        </Dialog.Content>
      </Dialog.Root>
    </div>
  )
}
